{"version":3,"sources":["index.js"],"names":["Deck","src","this","props","isEmpty","onClick","clickHandler","width","React","Component","Card","location","rank","showBack","suit","makeDeck","ranks","ans","Array","s","r","push","shuffleDeck","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","CardGrid","i","cardLayout","indices","maxes","step","scores","ind","startIndex","maxIndex","lineCards","score","scoreHand","getLineScores","rowScores","getRowScores","columnScores","getColumnScores","columnScoreTotal","reduce","x","y","rowScoreTotal","topRowElements","wholeRows","nextCard","resetCallback","colScore","align","style","createElement","row","rowElements","cardIndex","renderCard","CribbageGame","deck","console","log","cl","fill","state","slice","setState","newLayout","newDeck","currentCard","handleGridClick","c","resetGame","MultiRoundCribbageGame","rowScoreboard","colScoreboard","rScore","cScore","msg","alert","scoreString","updateScore","convertRankToNumber","hand","subsets","map","min","value","concat","set","a","b","score15","scoreFlush","j","scorePairs","numbers","sort","duplicity","currentLength","multiple","delta","scoreRuns","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e71e9793.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Deck extends React.Component {\n  render() {\n    const src = this.props.isEmpty? \"cards/blank_card.svg\" : \"cards/astronaut.svg\";\n    return <img\n              src={src}\n              onClick={() => this.props.clickHandler()}\n              width=\"50px\"\n            />;\n  }\n}\n\nfunction convertCardToUrl(rank, suit) {\n  return \"cards/\" + suit + \"_\" + rank + \".svg\";\n}\n\n\nclass Card extends React.Component {\n  render() {\n    let location;\n    if (this.props.showBack) {\n      location = \"cards/astronaut.svg\";\n    }\n    else if (this.props.rank && this.props.suit) {\n      location = convertCardToUrl(this.props.rank, this.props.suit);\n      \n    }\n    else {\n      location = \"cards/blank_card.svg\";\n    }\n\n    if (this.props.clickHandler) {\n      return <img\n                src={location}\n                width=\"50px\"\n                onClick={() => this.props.clickHandler()}\n              />;\n    }\n    else {\n      return <img\n                src={location}\n                width=\"50px\"\n              />;\n    }\n  }\n}\n\nfunction makeDeck() {\n  const suits = ['clubs', 'diamonds', 'hearts', 'spades'];\n  const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10',\n                  'jack', 'queen', 'king', 'ace'];\n  let ans = Array();\n  for (const s of suits) {\n    for (const r of ranks) {\n      ans.push( {rank: r, suit: s});\n    }\n  }\n  return ans;\n}\n\nfunction shuffleDeck(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\n\nclass CardGrid extends React.Component {\n  renderCard(i) {\n    return (\n      <Card\n        rank={this.props.cardLayout[i].rank}\n        suit={this.props.cardLayout[i].suit}\n        clickHandler={() => this.props.clickHandler(i)}\n      />\n    );\n  }\n\n  getLineScores(indices, maxes, step) {\n    var scores = Array();\n    for (let ind = 0 ; ind < 5 ; ind++) {\n\n      let startIndex = indices[ind];\n      let maxIndex = maxes[ind];\n      // get non null cards in row.\n      let lineCards = Array();\n      for(let i = startIndex; i < maxIndex; i += step) {\n        if (this.props.cardLayout[i].rank) {\n          lineCards.push(this.props.cardLayout[i]);\n        }\n      }\n      // Get score for them.\n      let score = 0;\n      if (lineCards.length > 1) {\n        score = scoreHand(lineCards);\n      }\n      scores.push(score);\n    }\n    return scores;\n  }\n\n  getRowScores() {\n    return this.getLineScores([0, 5, 10, 15, 20],\n                              [5, 10, 15, 20, 25], \n                              1);\n  }\n\n  getColumnScores() {\n    return this.getLineScores([0, 1, 2, 3, 4],\n                              [25, 25, 25, 25, 25], \n                              5);\n  }\n\n\n  render() {\n    let rowScores = this.getRowScores();\n    let columnScores = this.getColumnScores();\n    const columnScoreTotal = columnScores.reduce((x,y)=>x+y, 0);\n    const rowScoreTotal = rowScores.reduce((x,y)=>x+y, 0);\n\n\n    let topRowElements = Array();\n    let wholeRows = Array();\n    // first row is next card and then the column scores.\n    if(this.props.nextCard) {\n      topRowElements.push((<td>\n                            <Card \n                                rank={this.props.nextCard.rank}\n                                suit={this.props.nextCard.suit}\n                            />\n                          </td>));\n    }\n    else {\n      topRowElements.push((<td>\n        <Deck \n            isEmpty={false}\n            clickHandler={() => {this.props.resetCallback(rowScoreTotal, columnScoreTotal)}}\n        />\n      </td>));\n    }\n    for(const colScore of columnScores) {\n      topRowElements.push(<td><span align=\"center\">{colScore}</span></td>);\n    }\n    topRowElements.push(<td>\n                          <span\n                            align=\"center\"\n                            style={{'font-weight': 'bold',\n                                    'font-size': 24}}\n                          >\n                            {columnScoreTotal}\n                          </span>\n                        </td>);\n    \n    wholeRows.push(React.createElement(\"tr\", null, ...topRowElements));\n\n    // for other rows, it is the card layout with row score in first column.\n    for (let row = 0 ; row < 5; row++) {\n      let rowElements = Array();\n      rowElements.push(<td><span align=\"center\">{rowScores[row]}</span></td>);\n      for(let cardIndex = 0 ; cardIndex < 5; cardIndex++) {\n        const ind = cardIndex + 5*row;\n        rowElements.push(<td>{this.renderCard(ind)}</td>);\n      }\n      wholeRows.push(React.createElement(\"tr\", null, ...rowElements));\n    }\n\n    wholeRows.push(<tr><td>\n      <span\n        align=\"center\"\n        style={{'font-weight': 'bold',\n                'font-size': 24}}\n      >\n        {rowScoreTotal}\n      </span>\n    </td></tr>);\n\n    return React.createElement(\"table\", null, ...wholeRows);\n  }\n}\n\n\nclass CribbageGame extends React.Component {\n  constructor(props) {\n    super(props);\n    const deck = makeDeck();\n    shuffleDeck(deck);\n    console.log(\"deck length:\", deck.length);\n\n    // fill center card\n    let cl = Array(25).fill({rank: null, suit: null});\n    cl[12] = deck[0];\n\n    this.state = {\n      deck: deck.slice(1, deck.length), \n      cardLayout: cl\n    };\n  }\n\n  resetGame() {\n    const deck = makeDeck();\n    shuffleDeck(deck);\n    console.log(\"deck length:\", deck.length);\n\n    // fill center card\n    let cl = Array(25).fill({rank: null, suit: null});\n    cl[12] = deck[0];\n\n    this.setState({\n      deck: deck.slice(1, deck.length), \n      cardLayout: cl\n    });\n  }\n\n  handleGridClick(i) {\n    // If there is already a card there, do nothing.\n    if(this.state.cardLayout[i].rank && this.state.cardLayout[i].suit) {\n      return;\n    }\n    const newLayout = this.state.cardLayout.slice()\n    newLayout[i] = this.state.deck[0];\n    const newDeck = this.state.deck.slice(1, this.state.deck.length);\n\n    this.setState({\n      deck: newDeck,\n      cardLayout: newLayout\n    });\n  }\n\n\n  render() {\n    let currentCard;\n    console.log(this.state.deck.length);\n    if (this.state.deck.length > 27) {\n      currentCard = this.state.deck[0];\n    }\n    else {\n      currentCard = null;\n    }\n    return (\n      <div>\n        <CardGrid\n          nextCard={currentCard}\n          cardLayout={this.state.cardLayout}\n          clickHandler={(i) => this.handleGridClick(i)}\n          resetCallback={(r,c) => {this.resetGame(); this.props.resetCallback(r,c)}}\n        />\n      </div>\n    );\n  }\n}\n\nclass MultiRoundCribbageGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowScoreboard: 0,\n      colScoreboard: 0,\n    }\n  }\n\n  updateScore(rScore, cScore) {\n    let msg;\n    if (rScore > cScore) {\n      rScore = rScore - cScore;\n      cScore = 0;\n      msg = \"Row Wins: \" + rScore + \" points\";;\n    }\n    else if (cScore > rScore) {\n      cScore = cScore - rScore;\n      rScore = 0;\n      msg = \"Col Wins: \" + cScore + \" points\";\n    }\n    else { //tie\n      msg = \"Tie!\";\n      cScore = 0;\n      rScore = 0;\n    }\n\n    alert(msg);\n    this.setState({rowScoreboard: this.state.rowScoreboard+rScore,\n                   colScoreboard: this.state.colScoreboard+cScore});\n  }\n\n\n  render() {\n    const scoreString = \"Row: \" + this.state.rowScoreboard + \"    Column: \" + this.state.colScoreboard;\n    return (<div>\n              <h1>{scoreString}</h1>\n              <CribbageGame resetCallback={(r, c) => this.updateScore(r, c)} />\n            </div>);\n  }\n}\n\n\n\n// ========================================\n\nReactDOM.render(\n  <MultiRoundCribbageGame />,\n  document.getElementById('root')\n);\n\n// var testHand = [{rank: '5', suit: 'spades'},\n//                 {rank: 'king', suit: 'spades'},\n//                 {rank: 'queen', suit: 'spades'},\n//                 {rank: 'king', suit: 'spades'},\n//                 {rank: 'jack', suit: 'clubs'},];\n\n// console.log(\"Hand:\", testHand);\n// console.log(\"Score 15: \", score15(testHand));\n// console.log(\"Score Pair: \", scorePairs(testHand));\n// console.log(\"Score Run: \", scoreRuns(testHand));\n// console.log(\"Score Flush: \", scoreFlush(testHand));\n\n// ========================================\n\n\nfunction convertRankToNumber(r) {\n  const d = {\n    'ace': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    '10': 10,\n    'jack': 11,\n    'queen': 12,\n    'king': 13\n  }\n  return d[r];\n}\n\nfunction scorePairs(hand) {\n  if (hand.length < 2) {\n    return 0;\n  }\n  var score = 0;\n  for (let i = 0 ; i < hand.length ; i++) {\n    for (let j = i+1 ; j < hand.length ; j++) {\n      if (hand[i].rank == hand[j].rank) {\n        score += 2;\n      }\n    }\n  }\n  return score;\n}\n\nfunction scoreFlush(hand) {\n  if (hand.length < 5) {\n    return 0;\n  }\n  if(hand[0].suit == hand[1].suit && \n    hand[0].suit == hand[2].suit &&\n    hand[0].suit == hand[3].suit &&\n    hand[0].suit == hand[4].suit) {\n      return 5;\n  }\n  return 0;\n}\n\n\nfunction score15(hand) {\n  const numbers = hand.map( (x) => Math.min(10, convertRankToNumber(x.rank)));\n  const getAllSubsets = \n      theArray => theArray.reduce(\n        (subsets, value) => subsets.concat(\n         subsets.map(set => [value,...set])\n        ),\n        [[]]\n      );\n  const subsets = getAllSubsets(numbers);\n  var score = 0;\n  for (const s of subsets) {\n    if(s.length > 0) {\n      const sumValue = s.reduce((a, b) => a+b, 0);\n      if (sumValue == 15) {\n        score += 2;\n      }\n    }\n  }\n  return score;\n}\n\nfunction scoreRuns(hand) {\n  // Get all numerical ranks in order.\n  let numbers = hand.map( (x) => convertRankToNumber(x.rank));\n  numbers.sort(function(a, b){return a-b});\n  numbers.push(1000); // for the following loop to be easy.\n\n  //console.log(numbers);\n\n  // Go through and see if we have runs.\n  var score  = 0;\n  var duplicity = 1;\n  var currentLength = 1;\n  var multiple = 1;\n  for (let i = 1 ; i < numbers.length ; i++) {\n    const current = numbers[i], prev = numbers[i-1];\n    const delta = current - prev;\n    //console.log(i, duplicity, currentLength, multiple);\n    if (delta == 0) {\n      duplicity += 1;\n    }\n    else if (delta == 1) {\n      multiple *= duplicity;\n      duplicity = 1;\n      currentLength += 1;\n    }\n    else { // broken sequence\n      if (currentLength > 2) {\n        score += (currentLength * multiple * duplicity);\n      }\n      currentLength = 1;\n      duplicity = 1;\n      multiple = 1;\n    }\n  }\n  return score;\n}\n\n\nfunction scoreHand(hand) {\n  var score = 0;\n\n  score += score15(hand);\n  score += scoreFlush(hand);\n  score += scorePairs(hand);\n  score += scoreRuns(hand);\n\n  return score;\n}"],"sourceRoot":""}