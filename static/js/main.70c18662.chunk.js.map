{"version":3,"sources":["index.js"],"names":["Deck","src","this","props","isEmpty","onClick","clickHandler","width","alt","React","Component","Card","location","rank","imgTag","showBack","suit","FadeCard","useState","comeIn","setComeIn","oldRank","setOldRank","oldSuit","setOldSuit","setTimeout","in","timeout","makeDeck","ranks","ans","s","r","push","shuffleDeck","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","CardGrid","i","cardLayout","indices","maxes","step","scores","ind","startIndex","maxIndex","lineCards","score","scoreHand","getLineScores","rowScores","getRowScores","columnScores","getColumnScores","columnScoreTotal","reduce","x","y","rowScoreTotal","topRowElements","wholeRows","nextCard","resetCallback","colScore","align","style","fontWeight","fontSize","createElement","row","rowElements","cardIndex","renderCard","CribbageGame","deck","cl","Array","fill","state","slice","rowTurn","cpuEnabled","cpuLevel","newRowTurn","cpuMoveHandler","setState","newLayout","newDeck","console","log","array2d","j","convertLayoutToGrid","openIndices","netRatings","col","baselineRowRating","getRowRating","baselineColRating","getColRating","newRowRating","newColRating","scoreDiff","getNextMoveRatings","alpha","max","softMaxRatings","values","map","exp","sum","a","b","softmax","total","assert","pickIndex","getNextMove","handleGridClick","currentCard","turnText","c","resetGame","control","checked","onChange","name","label","id","gutterBottom","defaultValue","aria-labelledby","valueLabelDisplay","e","v","marks","min","disabled","MultiRoundCribbageGame","rowScoreboard","colScoreboard","rScore","cScore","msg","alert","rowScoreString","colScoreString","updateScore","convertRankToNumber","hand","subsets","value","concat","set","score15","scoreFlush","scorePairs","numbers","sort","duplicity","currentLength","multiple","delta","scoreRuns","ReactDOM","render","document","getElementById","cardRatings","require","getCardRatings","subset","realCards","handId","n","String","rowInd","colInd"],"mappings":"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","file":"static/js/main.70c18662.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Fade from '@material-ui/core/Fade';\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nclass Deck extends React.Component {\n  render() {\n    const src = this.props.isEmpty? \"cards/blank_card.svg\" : \"cards/astronaut.svg\";\n    return <img\n              src={src}\n              onClick={() => this.props.clickHandler()}\n              width=\"50px\"\n              alt=\"\"\n            />;\n  }\n}\n\nfunction convertCardToUrl(rank, suit) {\n  return \"cards/\" + suit + \"_\" + rank + \".svg\";\n}\n\n\n\nfunction Card(props) {\n  let location;\n  if (props.showBack) {\n    location = \"cards/astronaut.svg\";\n  }\n  else if (props.rank && props.suit) {\n    location = convertCardToUrl(props.rank, props.suit);\n    \n  }\n  else {\n    location = \"cards/blank_card.svg\";\n  }\n\n  let imgTag;\n  if (props.clickHandler) {\n    imgTag = <img\n              src={location}\n              width=\"50px\"\n              onClick={() => props.clickHandler()}\n              alt=\"\"\n            />;\n  }\n  else {\n    imgTag = <img\n              src={location}\n              width=\"50px\"\n              alt=\"\"\n            />;\n  }\n  return <div {...props}>{imgTag}</div>;\n}\n\nfunction FadeCard(props) {\n  var [comeIn, setComeIn] = useState(true);\n  var [oldRank, setOldRank] = useState(null);\n  var [oldSuit, setOldSuit] = useState(null);\n\n  if ((oldRank !== props.rank || oldSuit !== props.suit) && comeIn) {\n    setComeIn(false);\n    setOldRank(props.rank);\n    setOldSuit(props.suit);\n    setTimeout(() => {setComeIn(true)}, 100);\n  }\n\n  return (<Fade in={comeIn} timeout={comeIn? 1500: 0}>\n      <Card {...props}/>\n    </Fade>);\n}\n\nfunction makeDeck() {\n  const suits = ['clubs', 'diamonds', 'hearts', 'spades'];\n  const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10',\n                  'jack', 'queen', 'king', 'ace'];\n  let ans = [];\n  for (const s of suits) {\n    for (const r of ranks) {\n      ans.push( {rank: r, suit: s});\n    }\n  }\n  return ans;\n}\n\nfunction shuffleDeck(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\n\nclass CardGrid extends React.Component {\n  renderCard(i) {\n    return (\n      <FadeCard\n        rank={this.props.cardLayout[i].rank}\n        suit={this.props.cardLayout[i].suit}\n        clickHandler={() => this.props.clickHandler(i)}\n      />\n    );\n  }\n\n  getLineScores(indices, maxes, step) {\n    var scores = [];\n    for (let ind = 0 ; ind < 5 ; ind++) {\n\n      let startIndex = indices[ind];\n      let maxIndex = maxes[ind];\n      // get non null cards in row.\n      let lineCards = [];\n      for(let i = startIndex; i < maxIndex; i += step) {\n        if (this.props.cardLayout[i].rank) {\n          lineCards.push(this.props.cardLayout[i]);\n        }\n      }\n      // Get score for them.\n      let score = 0;\n      if (lineCards.length > 1) {\n        score = scoreHand(lineCards);\n      }\n      scores.push(score);\n    }\n    return scores;\n  }\n\n  getRowScores() {\n    return this.getLineScores([0, 5, 10, 15, 20],\n                              [5, 10, 15, 20, 25], \n                              1);\n  }\n\n  getColumnScores() {\n    return this.getLineScores([0, 1, 2, 3, 4],\n                              [25, 25, 25, 25, 25], \n                              5);\n  }\n\n\n  render() {\n    let rowScores = this.getRowScores();\n    let columnScores = this.getColumnScores();\n    const columnScoreTotal = columnScores.reduce((x,y)=>x+y, 0);\n    const rowScoreTotal = rowScores.reduce((x,y)=>x+y, 0);\n\n\n    let topRowElements = [];\n    let wholeRows = [];\n    // first row is next card and then the column scores.\n    if(this.props.nextCard) {\n      topRowElements.push((<td>\n                            <Card \n                                rank={this.props.nextCard.rank}\n                                suit={this.props.nextCard.suit}\n                            />\n                          </td>));\n    }\n    else {\n      topRowElements.push((<td>\n        <Deck \n            isEmpty={false}\n            clickHandler={() => {this.props.resetCallback(rowScoreTotal, columnScoreTotal)}}\n        />\n      </td>));\n    }\n    for(const colScore of columnScores) {\n      topRowElements.push(<td><span align=\"center\">{colScore}</span></td>);\n    }\n    topRowElements.push(<td>\n                          <span\n                            align=\"center\"\n                            style={{fontWeight: 'bold',\n                                    fontSize: 24}}\n                          >\n                            {columnScoreTotal}\n                          </span>\n                        </td>);\n    \n    wholeRows.push(React.createElement(\"tr\", null, ...topRowElements));\n\n    // for other rows, it is the card layout with row score in first column.\n    for (let row = 0 ; row < 5; row++) {\n      let rowElements = [];\n      rowElements.push(<td><span align=\"center\">{rowScores[row]}</span></td>);\n      for(let cardIndex = 0 ; cardIndex < 5; cardIndex++) {\n        const ind = cardIndex + 5*row;\n        rowElements.push(<td>{this.renderCard(ind)}</td>);\n      }\n      wholeRows.push(React.createElement(\"tr\", null, ...rowElements));\n    }\n\n    wholeRows.push(<tr><td>\n      <span\n        align=\"center\"\n        style={{fontWeight: 'bold',\n                fontSize: 24}}\n      >\n        {rowScoreTotal}\n      </span>\n    </td></tr>);\n\n    return <table>{React.createElement(\"tbody\", null, ...wholeRows)}</table>;\n  }\n}\n\nclass CribbageGame extends React.Component {\n  constructor(props) {\n    super(props);\n    const deck = makeDeck();\n    shuffleDeck(deck);\n\n    // fill center card\n    let cl = Array(25).fill({rank: null, suit: null});\n    cl[12] = deck[0];\n\n    // Check who should start.\n    let rowTurn = true;\n\n    this.state = {\n      deck: deck.slice(1, deck.length), \n      cardLayout: cl,\n      rowTurn: rowTurn,\n      cpuEnabled: true,\n      cpuLevel: 5\n    };\n  }\n\n  resetGame() {\n    let deck = makeDeck();\n    shuffleDeck(deck);\n\n    // fill center card\n    let cl = Array(25).fill({rank: null, suit: null});\n    cl[12] = deck[0];\n    deck = deck.slice(1, deck.length);\n\n    const newRowTurn = !(this.state.rowTurn);\n\n    // call cpu here if it needs to make a move still.\n    if (!newRowTurn && this.state.cpuEnabled) {\n      setTimeout(()=> this.cpuMoveHandler(cl, deck[0]), 3000);\n    }\n\n    this.setState({\n      deck: deck, \n      cardLayout: cl,\n      rowTurn: newRowTurn\n    });\n  }\n\n  handleGridClick(i) {\n    // If there is already a card there, do nothing.\n    if(this.state.cardLayout[i].rank && this.state.cardLayout[i].suit) {\n      return;\n    }\n    const newLayout = this.state.cardLayout.slice()\n    newLayout[i] = this.state.deck[0];\n    const newDeck = this.state.deck.slice(1, this.state.deck.length);\n    const newRowTurn = !(this.state.rowTurn);\n\n    // call cpu here if it needs to make a move still.\n    if (newDeck.length > 27 && !newRowTurn && this.state.cpuEnabled) {\n      setTimeout(()=> this.cpuMoveHandler(newLayout, newDeck[0]), 3000);\n    }\n\n    this.setState({\n      deck: newDeck,\n      cardLayout: newLayout,\n      rowTurn: newRowTurn\n    });\n  }\n\n  cpuMoveHandler(cardLayout, nextCard) {\n    if (nextCard === null) {\n      console.log(this.state);\n    }\n    let ans = getNextMove(cardLayout, nextCard, this.state.cpuLevel);\n    if (ans !== null) {\n      this.handleGridClick(ans);\n    }\n  }\n\n  render() {\n    let currentCard;\n    let turnText;\n\n    if (this.state.deck.length > 27) {\n      currentCard = this.state.deck[0];\n      turnText = this.state.rowTurn? \"P1's Turn (rows)\" : \" P2/CPU's Turn (columns)\";\n    }\n    else {\n      currentCard = null;\n      turnText = \"Round Over - click deck (astronaut) for next round\";\n    }\n\n    return (\n      <div>\n        <h3>{turnText}</h3>\n        <br/>\n        <CardGrid\n          nextCard={currentCard}\n          cardLayout={this.state.cardLayout}\n          clickHandler={(i) => {if (this.state.rowTurn || !this.state.cpuEnabled) {this.handleGridClick(i)}}}\n          resetCallback={(r,c) => {this.resetGame(); this.props.resetCallback(r,c)}}\n        />\n        <br />\n        <FormControlLabel\n      control={\n        <Switch checked={this.state.cpuEnabled}\n                onChange={() => this.setState({cpuEnabled: !this.state.cpuEnabled})}\n                name=\"cpuEnableSwitch\" />\n      }\n      label=\"CPU Opponent\"\n        />\n        <br />\n        <div style={{width: \"200px\"}}>\n          <Typography id=\"discrete-slider\" gutterBottom>\n            {\"CPU Difficulty\"}\n          </Typography>\n          <Slider\n            defaultValue={5}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            onChange={(e, v) => this.setState({cpuLevel: v})}\n            step={1}\n            marks\n            min={1}\n            max={10}\n            disabled={!this.state.cpuEnabled}\n          />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nclass MultiRoundCribbageGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowScoreboard: 0,\n      colScoreboard: 0,\n    }\n  }\n\n  updateScore(rScore, cScore) {\n    let msg;\n    if (rScore > cScore) {\n      rScore = rScore - cScore;\n      cScore = 0;\n      msg = \"P1 (Row) Wins: \" + rScore + \" points\";;\n    }\n    else if (cScore > rScore) {\n      cScore = cScore - rScore;\n      rScore = 0;\n      msg = \"P2/CPU (Col) Wins: \" + cScore + \" points\";\n    }\n    else { //tie\n      msg = \"Tie!\";\n      cScore = 0;\n      rScore = 0;\n    }\n\n    alert(msg);\n    this.setState({rowScoreboard: this.state.rowScoreboard+rScore,\n                   colScoreboard: this.state.colScoreboard+cScore});\n  }\n\n\n  render() {\n    const rowScoreString = \"P1 Score (Row): \" + this.state.rowScoreboard;\n    const colScoreString = \"P2/CPU Score (Col): \" + this.state.colScoreboard;\n    return (<div>\n              <h2>{rowScoreString}</h2>\n              <h2>{colScoreString}</h2>\n              <CribbageGame resetCallback={(r, c) => this.updateScore(r, c)} />\n            </div>);\n  }\n}\n\n\n\n// ========================================\n\nReactDOM.render(\n  <MultiRoundCribbageGame />,\n  document.getElementById('root')\n);\n\n// var testHand = [{rank: '5', suit: 'spades'},\n//                 {rank: 'king', suit: 'spades'},\n//                 {rank: 'queen', suit: 'spades'},\n//                 {rank: 'king', suit: 'spades'},\n//                 {rank: 'jack', suit: 'clubs'},];\n\n// console.log(\"Hand:\", testHand);\n// console.log(\"Score 15: \", score15(testHand));\n// console.log(\"Score Pair: \", scorePairs(testHand));\n// console.log(\"Score Run: \", scoreRuns(testHand));\n// console.log(\"Score Flush: \", scoreFlush(testHand));\n\n// ========================================\n\n\nfunction convertRankToNumber(r) {\n  const d = {\n    'ace': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    '10': 10,\n    'jack': 11,\n    'queen': 12,\n    'king': 13\n  }\n  return d[r];\n}\n\nfunction scorePairs(hand) {\n  if (hand.length < 2) {\n    return 0;\n  }\n  var score = 0;\n  for (let i = 0 ; i < hand.length ; i++) {\n    for (let j = i+1 ; j < hand.length ; j++) {\n      if (hand[i].rank === hand[j].rank) {\n        score += 2;\n      }\n    }\n  }\n  return score;\n}\n\nfunction scoreFlush(hand) {\n  if (hand.length < 5) {\n    return 0;\n  }\n  if(hand[0].suit === hand[1].suit && \n    hand[0].suit === hand[2].suit &&\n    hand[0].suit === hand[3].suit &&\n    hand[0].suit === hand[4].suit) {\n      return 5;\n  }\n  return 0;\n}\n\n\nfunction score15(hand) {\n  const numbers = hand.map( (x) => Math.min(10, convertRankToNumber(x.rank)));\n  const getAllSubsets = \n      theArray => theArray.reduce(\n        (subsets, value) => subsets.concat(\n         subsets.map(set => [value,...set])\n        ),\n        [[]]\n      );\n  const subsets = getAllSubsets(numbers);\n  var score = 0;\n  for (const s of subsets) {\n    if(s.length > 0) {\n      const sumValue = s.reduce((a, b) => a+b, 0);\n      if (sumValue === 15) {\n        score += 2;\n      }\n    }\n  }\n  return score;\n}\n\nfunction scoreRuns(hand) {\n  // Get all numerical ranks in order.\n  let numbers = hand.map( (x) => convertRankToNumber(x.rank));\n  numbers.sort(function(a, b){return a-b});\n  numbers.push(1000); // for the following loop to be easy.\n\n\n  // Go through and see if we have runs.\n  var score  = 0;\n  var duplicity = 1;\n  var currentLength = 1;\n  var multiple = 1;\n  for (let i = 1 ; i < numbers.length ; i++) {\n    const current = numbers[i], prev = numbers[i-1];\n    const delta = current - prev;\n    if (delta === 0) {\n      duplicity += 1;\n    }\n    else if (delta === 1) {\n      multiple *= duplicity;\n      duplicity = 1;\n      currentLength += 1;\n    }\n    else { // broken sequence\n      if (currentLength > 2) {\n        score += (currentLength * multiple * duplicity);\n      }\n      currentLength = 1;\n      duplicity = 1;\n      multiple = 1;\n    }\n  }\n  return score;\n}\n\n\nfunction scoreHand(hand) {\n  var score = 0;\n\n  score += score15(hand);\n  score += scoreFlush(hand);\n  score += scorePairs(hand);\n  score += scoreRuns(hand);\n\n  return score;\n}\n\n//=========================================================================\n//===========================CPU NEXT MOVE LOGIC===========================\n//=========================================================================\n\n// Load the required ratings JSON file.\nlet cardRatings = require('./ratings.json');\n\nfunction convertLayoutToGrid(cardLayout) {\n  let ans = [];\n  for (let i = 0 ; i < 5 ; i++) {\n    let row = [];\n    for (let j = 0 ; j < 5 ; j++) {\n      row.push(cardLayout[i*5+j]);\n    }\n    ans.push(row);\n  }\n  return ans;\n}\n\nfunction getCardRatings(subset) {\n  let realCards = [];\n  for (const s of subset) {\n    if (s.rank && s.suit) {\n      realCards.push(s);\n    }\n  }\n\n  if (realCards.length === 5) {\n    return scoreHand(realCards);\n  }\n  else if (realCards.length === 0) {\n    return cardRatings[\"0\"];\n  }\n  else {\n    // Convert to numbers and sort into ascending order.\n    let numbers = realCards.map((x) => convertRankToNumber(x.rank));\n    numbers.sort((a, b) => a - b);\n    // Convert to an ID.\n    let handId = 0;\n    for (const n of numbers) {\n      handId *= 14;\n      handId += n;\n    }\n    return cardRatings[String(handId)];\n  }\n}\n\nfunction getRowRating(array2d, rowInd) {\n  return getCardRatings(array2d[rowInd]);\n}\n\nfunction getColRating(array2d, colInd) {\n  let col = [];\n  for (let row = 0 ; row < array2d.length ; row++) {\n    col.push(array2d[row][colInd]);\n  }\n  return getCardRatings(col);\n}\n\nfunction getNextMoveRatings(cardLayout, nextCard) {\n\n  let array2d = convertLayoutToGrid(cardLayout);\n\n  // Iterate through array tracking score and index at each spot.\n  let openIndices = [];\n  let netRatings = [];\n\n  for (let row = 0 ; row < 5 ; row++) {\n    for (let col = 0 ; col < 5 ; col ++) {\n      // If spot filled, skip past it. Can't place here.\n      if (array2d[row][col].rank) {\n        continue;\n      }\n      \n      // check the value of placing the card at each position in the grid.\n      let baselineRowRating = getRowRating(array2d, row);\n      let baselineColRating = getColRating(array2d, col);\n\n      // place the card into this spot.\n      array2d[row][col] = nextCard;\n\n      // calculate new score\n      let newRowRating = getRowRating(array2d, row);\n      let newColRating = getColRating(array2d, col);\n      \n      // Put null card back in.\n      array2d[row][col] = {rank: null, suit: null};\n\n      // check score differential.\n      let scoreDiff = (newColRating - newRowRating) - (baselineColRating - baselineRowRating);\n      \n      openIndices.push(row*5 + col);\n      netRatings.push(scoreDiff);\n    }\n  }\n  return [openIndices, netRatings];\n}\n\n/** Weighted soft max of values, multiply by alpha first.\n * \n * @param {Array[number]} values \n * @param {number} alpha \n */\nfunction softmax(values, alpha) {\n  let ans = values.map((x) => Math.exp(x*alpha));\n  let sum = ans.reduce((a,b) => a+b, 0);\n  return ans.map((x) => x/sum);\n}\n\n/** Return random index according to weights in values\n * \n * @param {Array[number]} values Must be a prob distribution.\n */\nfunction pickIndex(values) {\n  let i = 0, total=0;\n  const r = Math.random();\n\n  for (i = 0 ; i < values.length ; i++) {\n    total += values[i];\n    if (r < total) {\n      return i;\n    }\n  }\n  console.assert(false, \"Should not reach here in weighted random sampling\");\n  return values.length-1;\n}\n\nfunction getNextMove(cardLayout, nextCard, cpuLevel) {\n  let [openIndices, netRatings] = getNextMoveRatings(cardLayout, nextCard);\n  if (openIndices.length === 0) {\n    return null;\n  }\n  let alpha = (cpuLevel === 10)? 10 : Math.max(cpuLevel-1, 0) / 2.5;\n  console.log(`Alpha : ${alpha}`);\n  let softMaxRatings = softmax(netRatings, alpha);\n  return openIndices[pickIndex(softMaxRatings)];\n}\n"],"sourceRoot":""}