{"version":3,"sources":["index.js"],"names":["Deck","src","this","props","isEmpty","onClick","clickHandler","width","alt","React","Component","Card","location","rank","showBack","suit","makeDeck","ranks","ans","s","r","push","shuffleDeck","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","CardGrid","i","cardLayout","indices","maxes","step","scores","ind","startIndex","maxIndex","lineCards","score","scoreHand","getLineScores","rowScores","getRowScores","columnScores","getColumnScores","columnScoreTotal","reduce","x","y","rowScoreTotal","topRowElements","wholeRows","nextCard","resetCallback","colScore","align","style","fontWeight","fontSize","createElement","row","rowElements","cardIndex","renderCard","CPUMoveButton","array2d","j","convertLayoutToGrid","maxScoreDiff","Infinity","maxScoreIndices","col","baselineRowRating","getRowRating","baselineColRating","getColRating","newRowRating","newColRating","scoreDiff","console","log","abs","indexToReturn","getNextMove","alert","rowTurn","moveHandler","bind","CribbageGame","deck","cl","Array","fill","state","slice","setState","newLayout","newDeck","currentCard","turnText","handleGridClick","c","resetGame","MultiRoundCribbageGame","rowScoreboard","colScoreboard","rScore","cScore","msg","rowScoreString","colScoreString","updateScore","convertRankToNumber","hand","subsets","map","min","value","concat","set","a","b","score15","scoreFlush","scorePairs","numbers","sort","duplicity","currentLength","multiple","delta","scoreRuns","ReactDOM","render","document","getElementById","cardRatings","require","getCardRatings","subset","realCards","handId","n","String","rowInd","colInd"],"mappings":"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","file":"static/js/main.81ce9ef1.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Deck extends React.Component {\n  render() {\n    const src = this.props.isEmpty? \"cards/blank_card.svg\" : \"cards/astronaut.svg\";\n    return <img\n              src={src}\n              onClick={() => this.props.clickHandler()}\n              width=\"50px\"\n              alt=\"\"\n            />;\n  }\n}\n\nfunction convertCardToUrl(rank, suit) {\n  return \"cards/\" + suit + \"_\" + rank + \".svg\";\n}\n\n\nclass Card extends React.Component {\n  render() {\n    let location;\n    if (this.props.showBack) {\n      location = \"cards/astronaut.svg\";\n    }\n    else if (this.props.rank && this.props.suit) {\n      location = convertCardToUrl(this.props.rank, this.props.suit);\n      \n    }\n    else {\n      location = \"cards/blank_card.svg\";\n    }\n\n    if (this.props.clickHandler) {\n      return <img\n                src={location}\n                width=\"50px\"\n                onClick={() => this.props.clickHandler()}\n                alt=\"\"\n              />;\n    }\n    else {\n      return <img\n                src={location}\n                width=\"50px\"\n                alt=\"\"\n              />;\n    }\n  }\n}\n\nfunction makeDeck() {\n  const suits = ['clubs', 'diamonds', 'hearts', 'spades'];\n  const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10',\n                  'jack', 'queen', 'king', 'ace'];\n  let ans = [];\n  for (const s of suits) {\n    for (const r of ranks) {\n      ans.push( {rank: r, suit: s});\n    }\n  }\n  return ans;\n}\n\nfunction shuffleDeck(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\n\nclass CardGrid extends React.Component {\n  renderCard(i) {\n    return (\n      <Card\n        rank={this.props.cardLayout[i].rank}\n        suit={this.props.cardLayout[i].suit}\n        clickHandler={() => this.props.clickHandler(i)}\n      />\n    );\n  }\n\n  getLineScores(indices, maxes, step) {\n    var scores = [];\n    for (let ind = 0 ; ind < 5 ; ind++) {\n\n      let startIndex = indices[ind];\n      let maxIndex = maxes[ind];\n      // get non null cards in row.\n      let lineCards = [];\n      for(let i = startIndex; i < maxIndex; i += step) {\n        if (this.props.cardLayout[i].rank) {\n          lineCards.push(this.props.cardLayout[i]);\n        }\n      }\n      // Get score for them.\n      let score = 0;\n      if (lineCards.length > 1) {\n        score = scoreHand(lineCards);\n      }\n      scores.push(score);\n    }\n    return scores;\n  }\n\n  getRowScores() {\n    return this.getLineScores([0, 5, 10, 15, 20],\n                              [5, 10, 15, 20, 25], \n                              1);\n  }\n\n  getColumnScores() {\n    return this.getLineScores([0, 1, 2, 3, 4],\n                              [25, 25, 25, 25, 25], \n                              5);\n  }\n\n\n  render() {\n    let rowScores = this.getRowScores();\n    let columnScores = this.getColumnScores();\n    const columnScoreTotal = columnScores.reduce((x,y)=>x+y, 0);\n    const rowScoreTotal = rowScores.reduce((x,y)=>x+y, 0);\n\n\n    let topRowElements = [];\n    let wholeRows = [];\n    // first row is next card and then the column scores.\n    if(this.props.nextCard) {\n      topRowElements.push((<td>\n                            <Card \n                                rank={this.props.nextCard.rank}\n                                suit={this.props.nextCard.suit}\n                            />\n                          </td>));\n    }\n    else {\n      topRowElements.push((<td>\n        <Deck \n            isEmpty={false}\n            clickHandler={() => {this.props.resetCallback(rowScoreTotal, columnScoreTotal)}}\n        />\n      </td>));\n    }\n    for(const colScore of columnScores) {\n      topRowElements.push(<td><span align=\"center\">{colScore}</span></td>);\n    }\n    topRowElements.push(<td>\n                          <span\n                            align=\"center\"\n                            style={{fontWeight: 'bold',\n                                    fontSize: 24}}\n                          >\n                            {columnScoreTotal}\n                          </span>\n                        </td>);\n    \n    wholeRows.push(React.createElement(\"tr\", null, ...topRowElements));\n\n    // for other rows, it is the card layout with row score in first column.\n    for (let row = 0 ; row < 5; row++) {\n      let rowElements = [];\n      rowElements.push(<td><span align=\"center\">{rowScores[row]}</span></td>);\n      for(let cardIndex = 0 ; cardIndex < 5; cardIndex++) {\n        const ind = cardIndex + 5*row;\n        rowElements.push(<td>{this.renderCard(ind)}</td>);\n      }\n      wholeRows.push(React.createElement(\"tr\", null, ...rowElements));\n    }\n\n    wholeRows.push(<tr><td>\n      <span\n        align=\"center\"\n        style={{fontWeight: 'bold',\n                fontSize: 24}}\n      >\n        {rowScoreTotal}\n      </span>\n    </td></tr>);\n\n    return <table>{React.createElement(\"tbody\", null, ...wholeRows)}</table>;\n  }\n}\n\n\nclass CPUMoveButton extends React.Component {\n  clickHandler() {\n    let ans = getNextMove(this.props.cardLayout, this.props.nextCard);\n\n    if (ans === null) {\n      alert(\"There is no move left.\\nThe round is over.\\nClick the deck (astronaut) to start the next round.\");\n    }\n\n    else if (this.props.rowTurn) {\n      alert(\"It is your turn, not the CPU.\\nMake a move.\");\n      return;\n    }\n\n    else {\n      // Convert back to normal index\n      const ind = ans[0]*5 + ans[1];\n      this.props.moveHandler(ind);\n    }\n\n  }\n  \n  render() {\n    return (<button onClick={this.clickHandler.bind(this)}>\n        {\"Do Next CPU Move\"}\n    </button>);\n  }\n}\n\nclass CribbageGame extends React.Component {\n  constructor(props) {\n    super(props);\n    const deck = makeDeck();\n    shuffleDeck(deck);\n    //console.log(\"deck length:\", deck.length);\n\n    // fill center card\n    let cl = Array(25).fill({rank: null, suit: null});\n    cl[12] = deck[0];\n\n    // Check who should start.\n    let rowTurn = (Math.random() > 0.5);\n\n    this.state = {\n      deck: deck.slice(1, deck.length), \n      cardLayout: cl,\n      rowTurn: rowTurn\n    };\n  }\n\n  resetGame() {\n    const deck = makeDeck();\n    shuffleDeck(deck);\n    console.log(\"deck length:\", deck.length);\n\n    // fill center card\n    let cl = Array(25).fill({rank: null, suit: null});\n    cl[12] = deck[0];\n\n    this.setState({\n      deck: deck.slice(1, deck.length), \n      cardLayout: cl,\n      rowTurn: !this.state.rowTurn\n    });\n  }\n\n  handleGridClick(i) {\n    // If there is already a card there, do nothing.\n    if(this.state.cardLayout[i].rank && this.state.cardLayout[i].suit) {\n      return;\n    }\n    const newLayout = this.state.cardLayout.slice()\n    newLayout[i] = this.state.deck[0];\n    const newDeck = this.state.deck.slice(1, this.state.deck.length);\n\n    this.setState({\n      deck: newDeck,\n      cardLayout: newLayout,\n      rowTurn: !(this.state.rowTurn)\n    });\n  }\n\n\n  render() {\n    let currentCard;\n    let turnText;\n    //console.log(this.state.deck.length);\n    if (this.state.deck.length > 27) {\n      currentCard = this.state.deck[0];\n      turnText = this.state.rowTurn? \"P1's Turn (rows)\" : \" P2/CPU's Turn (columns)\";\n    }\n    else {\n      currentCard = null;\n      turnText = \"Round Over - click deck (astronaut) for next round\";\n    }\n    return (\n      <div>\n        <h3>{turnText}</h3>\n        <br/>\n        <CardGrid\n          nextCard={currentCard}\n          cardLayout={this.state.cardLayout}\n          clickHandler={(i) => this.handleGridClick(i)}\n          resetCallback={(r,c) => {this.resetGame(); this.props.resetCallback(r,c)}}\n        />\n        <br/>\n        <CPUMoveButton\n          nextCard={currentCard}\n          cardLayout={this.state.cardLayout}\n          moveHandler={(i) => this.handleGridClick(i)}\n          rowTurn={this.state.rowTurn}\n        />\n      </div>\n    );\n  }\n}\n\nclass MultiRoundCribbageGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowScoreboard: 0,\n      colScoreboard: 0,\n    }\n  }\n\n  updateScore(rScore, cScore) {\n    let msg;\n    if (rScore > cScore) {\n      rScore = rScore - cScore;\n      cScore = 0;\n      msg = \"P1 (Row) Wins: \" + rScore + \" points\";;\n    }\n    else if (cScore > rScore) {\n      cScore = cScore - rScore;\n      rScore = 0;\n      msg = \"P2/CPU (Col) Wins: \" + cScore + \" points\";\n    }\n    else { //tie\n      msg = \"Tie!\";\n      cScore = 0;\n      rScore = 0;\n    }\n\n    alert(msg);\n    this.setState({rowScoreboard: this.state.rowScoreboard+rScore,\n                   colScoreboard: this.state.colScoreboard+cScore});\n  }\n\n\n  render() {\n    const rowScoreString = \"P1 Score (Row): \" + this.state.rowScoreboard;\n    const colScoreString = \"P2/CPU Score (Col): \" + this.state.colScoreboard;\n    return (<div>\n              <h2>{rowScoreString}</h2>\n              <h2>{colScoreString}</h2>\n              <CribbageGame resetCallback={(r, c) => this.updateScore(r, c)} />\n            </div>);\n  }\n}\n\n\n\n// ========================================\n\nReactDOM.render(\n  <MultiRoundCribbageGame />,\n  document.getElementById('root')\n);\n\n// var testHand = [{rank: '5', suit: 'spades'},\n//                 {rank: 'king', suit: 'spades'},\n//                 {rank: 'queen', suit: 'spades'},\n//                 {rank: 'king', suit: 'spades'},\n//                 {rank: 'jack', suit: 'clubs'},];\n\n// console.log(\"Hand:\", testHand);\n// console.log(\"Score 15: \", score15(testHand));\n// console.log(\"Score Pair: \", scorePairs(testHand));\n// console.log(\"Score Run: \", scoreRuns(testHand));\n// console.log(\"Score Flush: \", scoreFlush(testHand));\n\n// ========================================\n\n\nfunction convertRankToNumber(r) {\n  const d = {\n    'ace': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    '10': 10,\n    'jack': 11,\n    'queen': 12,\n    'king': 13\n  }\n  return d[r];\n}\n\nfunction scorePairs(hand) {\n  if (hand.length < 2) {\n    return 0;\n  }\n  var score = 0;\n  for (let i = 0 ; i < hand.length ; i++) {\n    for (let j = i+1 ; j < hand.length ; j++) {\n      if (hand[i].rank === hand[j].rank) {\n        score += 2;\n      }\n    }\n  }\n  return score;\n}\n\nfunction scoreFlush(hand) {\n  if (hand.length < 5) {\n    return 0;\n  }\n  if(hand[0].suit === hand[1].suit && \n    hand[0].suit === hand[2].suit &&\n    hand[0].suit === hand[3].suit &&\n    hand[0].suit === hand[4].suit) {\n      return 5;\n  }\n  return 0;\n}\n\n\nfunction score15(hand) {\n  const numbers = hand.map( (x) => Math.min(10, convertRankToNumber(x.rank)));\n  const getAllSubsets = \n      theArray => theArray.reduce(\n        (subsets, value) => subsets.concat(\n         subsets.map(set => [value,...set])\n        ),\n        [[]]\n      );\n  const subsets = getAllSubsets(numbers);\n  var score = 0;\n  for (const s of subsets) {\n    if(s.length > 0) {\n      const sumValue = s.reduce((a, b) => a+b, 0);\n      if (sumValue === 15) {\n        score += 2;\n      }\n    }\n  }\n  return score;\n}\n\nfunction scoreRuns(hand) {\n  // Get all numerical ranks in order.\n  let numbers = hand.map( (x) => convertRankToNumber(x.rank));\n  numbers.sort(function(a, b){return a-b});\n  numbers.push(1000); // for the following loop to be easy.\n\n  //console.log(numbers);\n\n  // Go through and see if we have runs.\n  var score  = 0;\n  var duplicity = 1;\n  var currentLength = 1;\n  var multiple = 1;\n  for (let i = 1 ; i < numbers.length ; i++) {\n    const current = numbers[i], prev = numbers[i-1];\n    const delta = current - prev;\n    //console.log(i, duplicity, currentLength, multiple);\n    if (delta === 0) {\n      duplicity += 1;\n    }\n    else if (delta === 1) {\n      multiple *= duplicity;\n      duplicity = 1;\n      currentLength += 1;\n    }\n    else { // broken sequence\n      if (currentLength > 2) {\n        score += (currentLength * multiple * duplicity);\n      }\n      currentLength = 1;\n      duplicity = 1;\n      multiple = 1;\n    }\n  }\n  return score;\n}\n\n\nfunction scoreHand(hand) {\n  var score = 0;\n\n  score += score15(hand);\n  score += scoreFlush(hand);\n  score += scorePairs(hand);\n  score += scoreRuns(hand);\n\n  return score;\n}\n\n//=========================================================================\n//===========================CPU NEXT MOVE LOGIC===========================\n//=========================================================================\n\n// Load the required ratings JSON file.\nlet cardRatings = require('./ratings.json');\n\nfunction convertLayoutToGrid(cardLayout) {\n  let ans = [];\n  for (let i = 0 ; i < 5 ; i++) {\n    let row = [];\n    for (let j = 0 ; j < 5 ; j++) {\n      row.push(cardLayout[i*5+j]);\n    }\n    ans.push(row);\n  }\n  return ans;\n}\n\nfunction getCardRatings(subset) {\n  let realCards = [];\n  for (const s of subset) {\n    if (s.rank && s.suit) {\n      realCards.push(s);\n    }\n  }\n\n  if (realCards.length === 5) {\n    return scoreHand(realCards);\n  }\n  else if (realCards.length === 0) {\n    return cardRatings[\"0\"];\n  }\n  else {\n    // Convert to numbers and sort into ascending order.\n    let numbers = realCards.map((x) => convertRankToNumber(x.rank));\n    numbers.sort((a, b) => a - b);\n    // Convert to an ID.\n    let handId = 0;\n    for (const n of numbers) {\n      handId *= 14;\n      handId += n;\n    }\n    return cardRatings[String(handId)];\n  }\n}\n\nfunction getRowRating(array2d, rowInd) {\n  return getCardRatings(array2d[rowInd]);\n}\n\nfunction getColRating(array2d, colInd) {\n  let col = [];\n  for (let row = 0 ; row < array2d.length ; row++) {\n    col.push(array2d[row][colInd]);\n  }\n  return getCardRatings(col);\n}\n\n// eslint-disable-next-line\nfunction getNextMove(cardLayout, nextCard) {\n\n  let array2d = convertLayoutToGrid(cardLayout);\n\n  // iterate through array, trying to place the card at each null spot and get changed rating for row and col\n  // keeping track of \"max\" indices.\n  let maxScoreDiff = -Infinity;\n  let maxScoreIndices = [];\n\n  for (let row = 0 ; row < 5 ; row++) {\n    for (let col = 0 ; col < 5 ; col ++) {\n      // If spot filled, skip past it. Can't place here.\n      if (array2d[row][col].rank) {\n        continue;\n      }\n      \n      // check the value of placing the card at each position in the grid.\n      let baselineRowRating = getRowRating(array2d, row);\n      let baselineColRating = getColRating(array2d, col);\n\n      // place the card into this spot.\n      array2d[row][col] = nextCard;\n\n      // calculate new score\n      let newRowRating = getRowRating(array2d, row);\n      let newColRating = getColRating(array2d, col);\n      \n      // Put null card back in.\n      array2d[row][col] = {rank: null, suit: null};\n\n      // check score differential.\n      let scoreDiff = (newColRating - newRowRating) - (baselineColRating - baselineRowRating);\n      \n      console.log(`Checking: (${row}, ${col}). Diff: ${scoreDiff}`);\n\n      if(Math.abs(scoreDiff - maxScoreDiff) <= 1e-2) {\n        maxScoreIndices.push([row, col]);\n      }\n      else if (scoreDiff > maxScoreDiff) {\n        maxScoreIndices = [[row, col]];\n        maxScoreDiff = scoreDiff;\n      }\n    }\n  }\n  // return index to place next card at by choosing one of the max indices randomly.\n  if (maxScoreIndices.length === 0) {\n    return null;\n  }\n  let indexToReturn = Math.floor(Math.random() * maxScoreIndices.length);\n  console.log(`Best Count: ${maxScoreIndices.length}, Chose: ${indexToReturn}`);\n  return maxScoreIndices[indexToReturn];\n}\n"],"sourceRoot":""}